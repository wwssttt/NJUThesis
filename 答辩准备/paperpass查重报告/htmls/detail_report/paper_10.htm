<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>

<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_9.htm">上一页</a>
<a class="pagelink" href="paper_11.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：10/11页
]
</div>

<br><div style="margin-left:25px">

<img src="../../images/guanwang.gif"></div><br><br>
<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">331</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>长度超过了歌曲总长度的50%那么用户喜欢该歌曲，否则认为用户不喜欢当前歌曲，即消极行为，如式5.1和5.2所示。</span><span class='green'>其中，total length表示歌曲的总长度， past length表示用户收听该歌曲的时间长度，而pastRatio表示用户收听长度占歌曲总长度的比例。</span><span class='green'>attitude表示用户对歌曲的态度，当pastRatio不小于50%时取值为1表示积极态度，否则表示消极态度。</span><span class='green'>假如歌曲“大海”(记为 s)总长度为4分40秒，即280000毫秒，用户 a收听至1分钟即60000毫秒时跳过，</span><span class='green'>那么对应的有 pastRatio( a， s)=21.43%，那么我们认为用户 a不太喜欢歌曲“大海”，</span><span class='green'>而用户 b收听至4分钟即240000毫秒时跳过，那么对应的有 pastRatio( b， s)=85.71%，</span><a href='../sentence_detail/897.htm' target='right' class='orange' >我们认为用户 b比较喜欢当前歌曲。</a><span class='green'>至于b为什么没有听完整首歌曲，即pastRatio(b， s) .=</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">332</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>100%，可以认为是用户b收听歌曲的时间过长，想要换一首以免疲劳，而仍然收听了过半歌曲说明他还是喜欢此首歌曲的。</span><span class='green'>序列生成系统在歌曲播放至50%时便读取数据库中保存的用户当前会话期内的积极歌曲序列，并结合当前歌曲组成新的序列传递给推荐引擎。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">333</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>5.3.2推荐引擎</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">334</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在由序列生成系统得到用户当前会话期的收听列表后，图5.2所述的系统框架则</span><span class='green'>激活基于 Storm框架的多维时序推荐引擎去读取列表进行处理并生成最终的推荐列表。</span><span class='green'>之所以使用 Storm框架是因为音乐推荐系统是一个对实时性要求比较高的系统，需要及时地为用户生成推荐结果，</span><span class='green'>而 Storm恰恰是这样一个开源的且面向实时性处理的分布式框架。</span><span class='green'>第二章中已经简单介绍了Storm基本组成以及对应的DRPC的基本内容，本节将介绍该框架在本文原型系统中的应用。</span><span class='green'>由前文可知，在Storm框架中，每一个分布式的计算任务都被称之为一个拓扑，而拓扑按照一定的拓扑结构实现的。</span><span class='green'>因此，本文系统原型中核心的推荐引擎模块也对应着一个拓扑任务，用以完成为用户实时生成推荐列表的工作，其对应的拓扑图如图5.5所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">335</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.推荐引擎通过数据库接口DAO从数据库中读取用户当前会话期内的歌曲列表。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">336</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 5.5:</span><a href='../sentence_detail/911.htm' target='right' class='red' >推荐引擎工作拓扑结构图</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">337</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.读取共享内存中每一首歌曲隶属于每一个隐含主题的概率，进而将 1中的序列分割成 K个子时间序列。</span><span class='green'>其中，每一个子时间序列对应一个隐含主题，序列对应的变量为歌曲在该主题上的隶属概率。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">338</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.对2中的 K个子时间序列进行时序预测，预测下一期的取值，即用户可能收听的歌曲在该主题上的隶属度。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">339</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.将K个主题上的预测值汇总，得到下一首歌曲的完整概率分布。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">340</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/916.htm' target='right' class='orange' >5.计算曲库内所有歌曲与该歌曲的相似度。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">341</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/917.htm' target='right' class='orange' >6.将5中的相似度按照由大到小的顺序排列，并取前 10作为推荐列表。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">342</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>7.将推荐列表返回。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">343</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>由图5.5可以非常直观地看出，本文所实现的多维时序推荐引擎是完全并行化的，</span><span class='green'>即各个子时间序列的分析与预测以及不同歌曲与目标歌曲之间相似度的计算都是可以并行执行的，</span><a href='../sentence_detail/921.htm' target='right' class='orange' >这显然能够提升系统的执行效率。</a><span class='green'>至于在并行化的时候选择多少并行结点，这个取决于具体的应用场景，本文所研究的多维时间序列分析方法由于存在 K个隐含主题，因此自然选择 K个并行结点。</span><span class='green'>当然，能够并行的原因是我们弱化了各个隐含主题之间的相关性，认为各个隐含主题之间是相互独立的。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">344</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在构建了上述拓扑结构并实现后，下面需要做的就是将其部署到服务器上，具体的部署过程如下所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">345</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.启动zookeeper：</span><span class='green'>zkServer.sh start。</span><span class='green'>2.启动 nimbus：</span><span class='green'>storm nimbus。</span><span class='green'>Nimbus的作用类似于Hadoop中JobTracker的角色。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">346</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.启动 supervisor：</span><span class='green'>storm supervisor。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">347</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.启动 UI：</span><span class='green'>storm ui。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">348</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>5.启动drpc：</span><span class='green'>storm drpc。</span><span class='green'>通过 DRPC，其他机器可以远程执行 Topology。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">349</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>6.提交topology：</span><span class='green'>storm jar SweetFM.jar com.wst.sweetfm.topology.DRPC MTSATopology sweetfm。</span><a href='../sentence_detail/939.htm' target='right' class='orange' >将实现好的 Topology提交至Storm集群进行执行。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">350</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>7.显示所有 topology：</span><span class='green'>storm list。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">351</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>8.杀死指定topology：</span><span class='green'>storm kill sweetfm。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">352</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>mithunsatheesh给出了一种使用 PHP远程调用 Storm集群中运行的 Topology的方法，如下表所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">353</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>include ”includes/drpc/DRPC.php”;</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">354</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>$drpc = new DRPC(”xxx.xxx.x.xx”，3772，NULL);</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">355</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>$result = $drpc-)execute(”CallFunctionName”，$params);</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">356</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>具体到我们的原型系统中即是：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">357</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>include ”includes/drpc/DRPC.php”;</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">358</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>$drpc = new DRPC(”114.212.84.238”，3772，NULL);</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">359</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>$seq =</span><span class='green'>“4，6，1，8，2，0”</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">360</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>$result = $drpc-)execute(”sweetfm”，$seq);</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">361</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>首先构造一个 drpc对象，然后以适当的格式给出用户在当前会话期的歌曲序列并作为参数传递给 drpc对象的 execute函数，</span><span class='green'>Storm集群上的 sweetfm接收传递过来的参数并进行计算，计算结束之后将结果返回给 result，即一个歌曲推荐列表，</span><span class='green'>如”[1，2，3，4，5，6，7，8，9，10]”</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">362</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>5.4系统效果</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">363</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本节给出本文实现的系统原型的效果截图，如下所示。</span><span class='green'>在下图中，从左上到右下共有六张效果图，分别为游客登录效果图、用户注册效果图、</span><span class='green'>用户登录效果图、系统主界面效果图、用户对歌曲打标签效果图以及用户调整播放音量效果图。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">364</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 5.6:</span><span class='green'>原型系统效果图</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">365</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第六章 总结与展望</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">366</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>6.1工作总结</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">367</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>近年来，个性化音乐电台应用大量出现，但这些应用的音乐推荐算法要么没有考虑用户听歌行为与所处上下文环境之间的关系，</span><span class='green'>要么对用户行为时间相关性处理地不够合理，导致推荐的结果不够理想。</span><span class='green'>为了提升音乐推荐的效果，本文提出了一种基于多维时间序列分析的音乐推荐方法，较为合理地利用了用户中期行为。</span><span class='green'>进一步地，本文给出一种基于用户长期、中期和即时行为的综合音乐推荐方法，全面考察了用户行为的时间相关性。</span><a href='../sentence_detail/969.htm' target='right' class='orange' >通过实验和原型系统的实现，本文初步验证了所述方法的有效性和可行性。</a><span class='green'>本文的主要贡献如下所示：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">368</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.提出了一种基于多维时间序列分析的个性化音乐推荐方法，该方法在使用主题模型将歌曲表示成由</span><span class='green'>若干隐含主题构成的概率分布的基础上将用户在当前会话期内的行为建模为一个多维时间序列。</span><span class='green'>通过对该多维时间序列的分析，该方法能够较好地预测用户行为偏好，并给出合理的推荐结果。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">369</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.给出了一种基于用户长期、中期和即时行为的综合音乐推荐方法，综合考虑了用户长期行为、中期行为以及即时行为对用户未来行为的作用和贡献。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">370</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.基于上述方法实现了一个原型系统，并通过Storm实现了上述方法的并行化，提高了处理效率。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">371</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>6.2工作展望</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">372</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.本文只是使用用户对歌曲所打的标签去构造歌曲对应的文档，可以尝试使用更丰富的的文本信息表征歌曲，进而构造更符合歌曲内在特征的文档。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">373</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/978.htm' target='right' class='orange' >2.本文所述方法主要是对用户的积极行为进行分析，可以尝试加入一些用户的否定行为信息。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">374</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.本文工作任务不同隐含主题之间是相互独立的，可以进一步考察不同主题之间的相关关系，提升分析的准确性。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">375</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>附录 A数据集使用说明</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">376</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>A.1权利声明</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">377</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本数据集抓取自Lastfm，所有数据归Lastfm所有，禁止商业用途。</span><span class='green'>如果您想使用该数据集进行科研活动，请务必给出对Last.fm及本文的引用信息。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">378</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>A.2数据特点</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">379</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/985.htm' target='right' class='orange' >1.包含完整的用户、歌曲、曲作者的基本信息。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">380</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/986.htm' target='right' class='orange' >2.包含丰富的用户行为记录，可用于构造用户行为序列。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">381</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.包含歌曲、曲作者的显着标签信息，可用于从文本的角度描述歌曲和作者。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">382</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.提供了标签的基本信息。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_9.htm">上一页</a>
<a class="pagelink" href="paper_11.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：10/11页
]
</div>

</div>

<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2013 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
