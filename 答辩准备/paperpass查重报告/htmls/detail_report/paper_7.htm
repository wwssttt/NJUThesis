<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>

<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_6.htm">上一页</a>
<a class="pagelink" href="paper_8.htm">下一页</a>
<a class="pagelink" href="paper_12.htm">尾页</a>
页码：7/12页
]
</div>

<br><div style="margin-left:25px">

<img src="../../images/guanwang.gif"></div><br><br>
<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">213</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.7.2评测标准</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">214</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>对于用户 u，我们通过对其收听记录所形成的有序列表进行分析，为其生成一个包含 N首歌曲的推荐歌曲列表，</span><span class='green'>如果这 N首歌曲中包含用户真实收听的下一首歌曲，那么我们认为这个对于用户 u的推荐是有效的。</span><span class='green'>显然，类似音乐推荐这种为用户推荐一组物品供选择的问题是典型的Top-N推荐问题(Top-N Recommendation， TNR)。</span><a href='../sentence_detail/570.htm' target='right' class='orange' >由文献 [2][40]可知，召回率(recall)和准确率(precision)是衡量一个Top-N推荐算法优劣的重要标准，我们这里也用这两种标准来评测本文提出的方法。</a><a href='../sentence_detail/571.htm' target='right' class='red' >记R(u)是根据用户在训练集上的行为给用户推荐的歌曲列表，而T (u)是用户在测试集上的行为列表，那么表征</a><a href='../sentence_detail/572.htm' target='right' class='red' >“检索出的相关文档数和文档库中所有的相关文档数的比率”</a><span class='green'>的召回率recall的定义如式3.16所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">215</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>可以看出，召回率表征用户真实收听的歌曲被推荐的数目与用户真实收听歌曲总数的比率。</span><span class='green'>因为在音乐推荐系统中，用户 u同一时刻在测试集上只会收听一首歌曲，即 |T (u)| =1。</span><a href='../sentence_detail/576.htm' target='right' class='orange' >因此，我们将式 3.16简化为如式 3.17所示的命中率(hit ratio)。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">216</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>其中， N为推荐系统为用户推荐的歌曲数目， hit表示用户实际收听的歌曲是否在推荐列表中，若在则为 1，否则为 0。</span><span class='green'>如果 hit为1，我们称之为“命中一次”。</span><span class='green'>记用户 u实际收听的歌曲为s，则 hit可表示为如式3.18。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">217</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>准确率 precision表征了</span><a href='../sentence_detail/581.htm' target='right' class='red' >“检索出的相关文档数和系统所有检索到的文件总数的比率”</a><span class='green'>，即用户真实收听的歌曲被推荐的数目与被推荐的歌曲总数的比率，其定义如式3.19所示：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">218</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>考虑到|T (u)| =1，式 3.19可简化为式3.20。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">219</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>考虑到召回率和准确率此消彼长的关系，文献 [21]中使用 F1-Score对模型进行评估，</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">220</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/585.htm' target='right' class='orange' >F1-Score的取值越大那么模型对应的综合效果越好，反之越差。</a><span class='green'>F1-Score可以用式3.21表示：</span><span class='green'>在如上所述的评测标准中，召回率和准确率的在很大程度上取决于如式3.17所示的命中率。</span><span class='green'>如果歌曲未被用户喜欢或收听，那么就认为该歌曲未命中。</span><span class='green'>然而，文献 [51]指出没有明显的证据表明未被评分的物品对用户来说是完全否定的。</span><span class='green'>也就是说，即使歌曲未命中，也不代表用户不喜欢该歌曲。</span><span class='green'>假设用户u真实收听的下一首歌曲为“同桌的你”，如果系统为其推荐了列表 (“北京北京”，“存在”，“同桌的你”)，那么我们认为该推荐是有效的，因为目标歌曲“同桌的你”在推荐列表中。</span><span class='green'>相反，如果系统为其推荐列表 (“白桦林”，“睡在我上铺的兄弟”，“一生有你” )，由于其中未包含目标歌曲“同桌的你”，我们 认为该推荐是无效的。</span><span class='green'>然而，第二个推荐列表中的歌曲与目标歌曲“同桌的你”都属于经典校园民谣，用户显然也会喜欢该列表，因此认为第二个推荐无效就不够合理；</span><span class='green'>第一个推荐列表中除了“同桌的你”之外其余两个都偏“摇滚”，这个列表对于喜好校园民谣的用户来说也并不一定有效。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">221</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>为了解决这种矛盾，我们可以考虑使用推荐偏差的大小来衡量算法的优劣。</span><a href='../sentence_detail/596.htm' target='right' class='orange' >也就是说，推荐偏差越小，算法越好，反之越差。</a><span class='green'>这里的偏差可以用歌曲对应的主题概率分布之间的Hellinger距离来表示。</span><span class='green'>如果一个推荐列表中的歌曲与目标歌曲的整体相似度较高，那么该列表中的歌曲与目标歌曲的距离就应该较小，</span><span class='green'>即推荐偏差较小，这时即使目标歌曲不在该列表中，我们也应该认为该列表合理。</span><span class='green'>而如果一个推荐列表中的歌曲与目标歌曲的相似度整体偏低，导致推荐偏差较大，即使其中包含目标歌曲，我们也应该降低该列表被认可的权重。</span><a href='../sentence_detail/601.htm' target='right' class='orange' >推荐系统主要包含评分预测和 Top- N推荐两类问题，在评分预测中我们常常使用均方根误差( RMSE)和平均绝对误差( MAE)来衡量算法的优劣，</a><span class='green'>这里我们将其借鉴到音乐推荐的问题中并用以衡量不同算法的优劣，其定义如式3.22和3.23所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">222</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/603.htm' target='right' class='orange' >其中，U为测试用户集，|U|为用户数，e(u)为向用户推荐的结果的误差。</a><span class='green'>考虑到我们为用户推荐的是一个列表，我们将e(u)看做是列表中所有歌曲与目标歌曲的平均距离。</span><span class='green'>如式3.24所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">223</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.7.3实验设置</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">224</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/607.htm' target='right' class='orange' >为了客观地衡量本文所述方法的效果，我们首先将所有数据随机地分为10份并将其中的9份作为训练集，剩余的1份为测试集，然后进行10轮交叉实验。</a><span class='green'>最后，我们将10轮实验的结果进行平均，从而得到最终的实验结果。</span><a href='../sentence_detail/609.htm' target='right' class='orange' >其中，本文将隐含主题数目设为30。</a><span class='green'>本文实验实在Dell Optiplex74的台式机上进行，操作系统为Ubuntu12.04，CPU为Intel酷睿2E6300，内存大小为2G，硬盘空间160G。</span><span class='green'>实验所用编程语言为Python2.7。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">225</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.7.4结果分析图3.5展示了当被推荐歌曲数目N由1到100的增长过程中，不同推荐算法</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">226</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>的命中率的变化情况，</span><a href='../sentence_detail/614.htm' target='right' class='orange' >这里包括基于用户的协同过滤算法( UserKNN)[42]、基于模式挖掘的推荐算法( PatternMining)</a><a href='../sentence_detail/615.htm' target='right' class='orange' >[18]、基于马尔科夫模型的推荐算法(1 st- Markov)[33]、基于全局特征的</a><a href='../sentence_detail/616.htm' target='right' class='orange' >推荐算法( Global)[10]、基于用户即时行为的音乐推荐( Local)[22]以及</a><span class='green'>本文提出的基于多维时间序列分析的音乐推荐方法( Music Recommendation Based on MultidimensionalTime Series Analysis，</span><span class='green'>MTSA)。</span><a href='../sentence_detail/619.htm' target='right' class='red' >其中，横坐标表示被推荐歌曲的数目，纵坐标表示算法的命中率。</a><span class='green'>由图3.5可以看出，代表本文所述方法的曲线与其他曲线能够明显分开且位于其他曲线之上，</span><span class='green'>表明本文所提方法能够获得比其他同类工作更好的召回率且提升效果比较明显。</span><span class='green'>此外，随着被推荐歌曲数目的增加，本文所述方法的召回率也同时提升且呈逐渐上升趋势。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">227</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 3.5:</span><a href='../sentence_detail/624.htm' target='right' class='red' >不同推荐算法在命中率上的表现</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">228</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/625.htm' target='right' class='orange' >图3.6展示了随着推荐列表长度增加，不同推荐算法的推荐准确率变化情况。</a><a href='../sentence_detail/626.htm' target='right' class='orange' >从图中可以非常直观地看出，虽然随着推荐列表长度的增加，所给几种推荐算法的准确率都有所下降，</a><span class='green'>但本文所给出的基于多维时间序列分析的音乐推荐算法能够取得最好的推荐准确率。</span><span class='green'>需要说明的是，随着推荐列表长度的增加，各算法推荐准确率取值比较低且持续下降是可以从准确率的定义中推导出来的。</span><span class='green'>假设用户数目为100，推荐列表长度为50，推荐算法的命中率为60%即命中数为60，那么此时的推荐准确度为0.012。</span><span class='green'>当推荐列表长度增加到100时，假设推荐算法的命中率提升到80%即命中数为80，那么此时的推荐准确率只有0.008。</span><span class='green'>简单来说，对于音乐推荐来说，准确率定义中的分子变化很小且取值也很小但分母却增长地比较快，</span><a href='../sentence_detail/632.htm' target='right' class='orange' >所以导致了推荐准确率取值很小且随着推荐列表长度增加，准确率不断下降。</a><span class='green'>因此，预测准确率偏低以及随着推荐列表增加而降低是可以解释的，而我们关注地不是其绝对取值，更大的意义上我们关注不同推荐算法获得的推荐准确率之间的相对效果。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">229</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 3.6:</span><a href='../sentence_detail/635.htm' target='right' class='red' >不同推荐算法在准确率上的表现</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">230</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>为了更为直观地考察本文所提方法在推荐准确率指标上的提升效果，我们下面使用相对指标进行评测。</span><span class='green'>考虑到基于用户的最近邻算法( UserKNN)在同类工作中得到的关注最多而 F1值是衡量不同推荐算法效果的综合指标，</span><span class='green'>本文考察基于多维时间序列分析的音乐推荐方法相较于 UserKNN在推荐 F1值上的提升效果(倍数)，</span><span class='green'>如图3.7所示。</span><a href='../sentence_detail/640.htm' target='right' class='orange' >其中，横坐标表示被推荐歌曲的数目，纵坐标表示算法推荐 F1值的提升倍数。</a><span class='green'>如果纵坐标取值大于零，表明本文所述方法的推荐F1值相较于 UserKNN算法有所提升；</span><span class='green'>如果纵坐标取值为零，表明效果没有提升；</span><span class='green'>如果纵坐标取值小于零，表明本文所述方法不但没有提高推荐 F1值而且还有所下降。</span><span class='green'>由图 3.7可以看出，无论被推荐歌曲数目为何值，纵坐标取值总是大于零，说明本文所述方法能够提升推荐的 F1值且提升幅度在 80%以上。</span><a href='../sentence_detail/645.htm' target='right' class='orange' >随着推荐列表长度的增长，提升的幅度也继续增长 (可达140%)。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">231</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图3.8和3.9展示了随着推荐列表长度的增加，几种不同的音乐推荐算法的均方根误差(</span><a href='../sentence_detail/647.htm' target='right' class='orange' >如图3.8所示)和平均绝对误差(如图3.9所示)的变化趋势。</a><a href='../sentence_detail/648.htm' target='right' class='orange' >其中，横坐标表示被推荐歌曲的数目，纵坐标表示不同推荐算法的误差。</a><a href='../sentence_detail/649.htm' target='right' class='orange' >由图可以直观地看出，本文所提方法的推荐误差较之其他几种算法都比较小。</a><span class='green'>随着推荐列表长度的增加，列表中无效的歌曲增多，使得推荐误差有所上升，但这种上升幅度</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">232</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 3.7:</span><span class='green'>本文方法相对于UserKNN在F1-Score指标上的提升也是是非常小的。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">233</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 3.8:</span><a href='../sentence_detail/654.htm' target='right' class='orange' >不同推荐算法在均方根误差上的表现</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">234</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>综合以上实验结果可以看出，无论是从命中率/准确率的角度去考察算法的优劣，还是从预测误差的角度去考察算法的优劣，</span><span class='green'>本文所述的基于多维时间序列分析的音乐推荐算法都能够取得比参考算法较好的效果。</span><span class='green'>这验证了本文所提方法的合理性，说明将用户行为建模为一个多维时间序列进行分析能够全面细致地实现对用户行为的刻画进而提升推荐效果。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">235</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 3.9:</span><a href='../sentence_detail/659.htm' target='right' class='red' >不同推荐算法在绝对误差上的表现</a>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_6.htm">上一页</a>
<a class="pagelink" href="paper_8.htm">下一页</a>
<a class="pagelink" href="paper_12.htm">尾页</a>
页码：7/12页
]
</div>

</div>

<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2013 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
